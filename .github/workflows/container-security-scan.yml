name: Container Security Scan

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      image_ref:
        description: 'Image reference to scan (e.g., kindlysoftware/kindly-guard:latest)'
        required: false
        type: string
      scan_type:
        description: 'Type of scan to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vulnerabilities
          - secrets
          - misconfigurations
          - licenses

env:
  DEFAULT_IMAGE: kindlysoftware/kindly-guard:latest
  GHCR_IMAGE: ghcr.io/${{ github.repository }}:latest

jobs:
  scan-docker-hub:
    name: Scan Docker Hub Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Determine image to scan
      id: image
      run: |
        if [ -n "${{ github.event.inputs.image_ref }}" ]; then
          echo "image=${{ github.event.inputs.image_ref }}" >> $GITHUB_OUTPUT
        else
          echo "image=${{ env.DEFAULT_IMAGE }}" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image.outputs.image }}
        format: 'sarif'
        output: 'trivy-docker-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        vuln-type: 'os,library'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-docker-results.sarif'
        category: 'trivy-docker-scheduled'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ steps.image.outputs.image }}
        output-format: sarif
        fail-build: false

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: 'grype-docker-scheduled'

    - name: Scan for secrets with Trivy
      if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets'
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --scanners secret \
          --format json \
          --output secrets-report.json \
          ${{ steps.image.outputs.image }}

    - name: Scan for misconfigurations
      if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'misconfigurations'
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --scanners misconfig \
          --format json \
          --output misconfig-report.json \
          ${{ steps.image.outputs.image }}

    - name: License scan
      if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'licenses'
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image \
          --scanners license \
          --format json \
          --output license-report.json \
          ${{ steps.image.outputs.image }}

    - name: Generate summary report
      if: always()
      run: |
        echo "## Container Security Scan Report" > scan-summary.md
        echo "" >> scan-summary.md
        echo "**Image:** ${{ steps.image.outputs.image }}" >> scan-summary.md
        echo "**Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> scan-summary.md
        echo "**Scan Type:** ${{ github.event.inputs.scan_type || 'all' }}" >> scan-summary.md
        echo "" >> scan-summary.md
        
        if [ -f secrets-report.json ]; then
          echo "### Secrets Scan" >> scan-summary.md
          secrets_count=$(jq '.Results | length' secrets-report.json)
          echo "Found $secrets_count potential secrets" >> scan-summary.md
          echo "" >> scan-summary.md
        fi
        
        if [ -f misconfig-report.json ]; then
          echo "### Misconfiguration Scan" >> scan-summary.md
          misconfig_count=$(jq '.Results | length' misconfig-report.json)
          echo "Found $misconfig_count misconfigurations" >> scan-summary.md
          echo "" >> scan-summary.md
        fi
        
        if [ -f license-report.json ]; then
          echo "### License Scan" >> scan-summary.md
          license_count=$(jq '.Results[0].Licenses | length' license-report.json 2>/dev/null || echo "0")
          echo "Found $license_count licenses" >> scan-summary.md
          echo "" >> scan-summary.md
        fi

    - name: Upload scan artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-scan-${{ github.run_id }}
        path: |
          *-report.json
          scan-summary.md
        retention-days: 90

  scan-ghcr:
    name: Scan GitHub Container Registry Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.GHCR_IMAGE }}
        format: 'sarif'
        output: 'trivy-ghcr-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        vuln-type: 'os,library'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-ghcr-results.sarif'
        category: 'trivy-ghcr-scheduled'

    - name: Run comprehensive scan
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}:/workspace \
          aquasec/trivy:latest image \
          --format json \
          --output /workspace/ghcr-comprehensive-scan.json \
          --scanners vuln,secret,misconfig,license \
          ${{ env.GHCR_IMAGE }}

    - name: Upload GHCR scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ghcr-security-scan-${{ github.run_id }}
        path: ghcr-comprehensive-scan.json
        retention-days: 90

  notify-on-critical:
    name: Notify on Critical Findings
    needs: [scan-docker-hub, scan-ghcr]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Create issue for critical findings
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Critical Security Findings in Container Images - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Critical Security Findings Detected
          
          The scheduled container security scan has detected critical vulnerabilities.
          
          **Workflow Run:** [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Date:** ${new Date().toISOString()}
          
          Please review the scan results and take appropriate action.
          
          ### Required Actions:
          1. Review the detailed scan results in the workflow artifacts
          2. Update base images if vulnerabilities are in the OS layer
          3. Update dependencies if vulnerabilities are in application libraries
          4. Rebuild and republish the container images
          
          cc: @${{ github.repository_owner }}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'critical', 'container-scan']
          });