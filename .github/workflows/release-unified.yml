name: Unified Release Workflow

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Stage 1: Validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Release version: $VERSION"

      - name: Verify branch
        run: |
          BRANCH=$(git branch -r --contains ${GITHUB_SHA} | grep -E 'origin/(main|master)' || true)
          if [ -z "$BRANCH" ]; then
            echo "::error::Release must be created from main or master branch"
            exit 1
          fi
          echo "::notice::Releasing from branch: $BRANCH"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run version validation
        run: |
          chmod +x scripts/validate-versions.sh
          ./scripts/validate-versions.sh
          
          # Additional check: verify tag matches root Cargo.toml
          ROOT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$ROOT_VERSION" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "::error::Tag version (${{ steps.get_version.outputs.version }}) doesn't match Cargo.toml version ($ROOT_VERSION)"
            exit 1
          fi

      - name: Security audit
        run: |
          cargo install cargo-audit --locked
          # Run audit - fail on vulnerabilities but allow unmaintained warnings
          # The paste crate is unmaintained but has no security issues
          cargo audit || true
          # Check specifically for vulnerabilities (exit code 1 means vulnerabilities found)
          if cargo audit --json | jq -e '.vulnerabilities.found // 0 > 0' > /dev/null; then
            echo "::error::Security vulnerabilities found!"
            cargo audit
            exit 1
          fi
          echo "::notice::Security audit passed (no vulnerabilities found)"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, including all commits"
            RANGE=""
          else
            RANGE="$PREV_TAG..HEAD"
          fi
          
          # Generate changelog
          CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%an)" --no-merges | grep -v "^- chore" | head -20)
          
          # Escape for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

  # Stage 2: Build Binaries (parallel)
  build-linux:
    name: Build Linux Binary
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust with musl target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Install musl tools
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build release binary
        run: |
          cargo build --release --target x86_64-unknown-linux-musl --bin kindly-guard
          cargo build --release --target x86_64-unknown-linux-musl --bin kindly-guard-cli

      - name: Verify static linking
        run: |
          ldd target/x86_64-unknown-linux-musl/release/kindly-guard 2>&1 | grep -q "not a dynamic executable" || \
            (echo "::error::Binary is not statically linked" && exit 1)
          echo "::notice::Linux binary is statically linked"

      - name: Strip binaries
        run: |
          strip target/x86_64-unknown-linux-musl/release/kindly-guard
          strip target/x86_64-unknown-linux-musl/release/kindly-guard-cli

      - name: Create archive
        run: |
          cd target/x86_64-unknown-linux-musl/release
          tar czf kindly-guard-${{ needs.validate.outputs.version }}-linux-x64.tar.gz \
            kindly-guard kindly-guard-cli
          sha256sum kindly-guard-${{ needs.validate.outputs.version }}-linux-x64.tar.gz > \
            kindly-guard-${{ needs.validate.outputs.version }}-linux-x64.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: |
            target/x86_64-unknown-linux-musl/release/kindly-guard-*.tar.gz
            target/x86_64-unknown-linux-musl/release/kindly-guard-*.tar.gz.sha256

  build-macos-x64:
    name: Build macOS x64 Binary
    needs: validate
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin

      - name: Build release binary
        run: |
          cargo build --release --target x86_64-apple-darwin --bin kindly-guard
          cargo build --release --target x86_64-apple-darwin --bin kindly-guard-cli

      - name: Strip binaries
        run: |
          strip target/x86_64-apple-darwin/release/kindly-guard
          strip target/x86_64-apple-darwin/release/kindly-guard-cli

      - name: Create archive
        run: |
          cd target/x86_64-apple-darwin/release
          tar czf kindly-guard-${{ needs.validate.outputs.version }}-macos-x64.tar.gz \
            kindly-guard kindly-guard-cli
          shasum -a 256 kindly-guard-${{ needs.validate.outputs.version }}-macos-x64.tar.gz > \
            kindly-guard-${{ needs.validate.outputs.version }}-macos-x64.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-binary
          path: |
            target/x86_64-apple-darwin/release/kindly-guard-*.tar.gz
            target/x86_64-apple-darwin/release/kindly-guard-*.tar.gz.sha256

  build-macos-arm64:
    name: Build macOS ARM64 Binary
    needs: validate
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Build release binary
        run: |
          cargo build --release --target aarch64-apple-darwin --bin kindly-guard
          cargo build --release --target aarch64-apple-darwin --bin kindly-guard-cli

      - name: Strip binaries
        run: |
          strip target/aarch64-apple-darwin/release/kindly-guard
          strip target/aarch64-apple-darwin/release/kindly-guard-cli

      - name: Create archive
        run: |
          cd target/aarch64-apple-darwin/release
          tar czf kindly-guard-${{ needs.validate.outputs.version }}-macos-arm64.tar.gz \
            kindly-guard kindly-guard-cli
          shasum -a 256 kindly-guard-${{ needs.validate.outputs.version }}-macos-arm64.tar.gz > \
            kindly-guard-${{ needs.validate.outputs.version }}-macos-arm64.tar.gz.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-binary
          path: |
            target/aarch64-apple-darwin/release/kindly-guard-*.tar.gz
            target/aarch64-apple-darwin/release/kindly-guard-*.tar.gz.sha256

  build-windows:
    name: Build Windows Binary
    needs: validate
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build release binary
        run: |
          cargo build --release --target x86_64-pc-windows-msvc --bin kindly-guard
          cargo build --release --target x86_64-pc-windows-msvc --bin kindly-guard-cli

      - name: Create archive
        shell: pwsh
        run: |
          cd target\x86_64-pc-windows-msvc\release
          Compress-Archive -Path kindly-guard.exe,kindly-guard-cli.exe `
            -DestinationPath "kindly-guard-${{ needs.validate.outputs.version }}-windows-x64.zip"
          
          $hash = Get-FileHash "kindly-guard-${{ needs.validate.outputs.version }}-windows-x64.zip" -Algorithm SHA256
          "$($hash.Hash.ToLower())  kindly-guard-${{ needs.validate.outputs.version }}-windows-x64.zip" | `
            Out-File -Encoding ASCII "kindly-guard-${{ needs.validate.outputs.version }}-windows-x64.zip.sha256"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: |
            target/x86_64-pc-windows-msvc/release/kindly-guard-*.zip
            target/x86_64-pc-windows-msvc/release/kindly-guard-*.zip.sha256

  # Stage 3: Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [validate, build-linux, build-macos-x64, build-macos-arm64, build-windows]
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz*" -o -name "*.zip*" \) -exec cp {} release/ \;
          ls -la release/
          echo "::notice::Prepared $(ls release/*.{tar.gz,zip} 2>/dev/null | wc -l) release assets"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          release_name: KindlyGuard v${{ needs.validate.outputs.version }}
          body: |
            ## KindlyGuard v${{ needs.validate.outputs.version }}
            
            Security-focused MCP server protecting against unicode attacks, injection attempts, and other threats.
            
            ### Changes
            ${{ needs.validate.outputs.changelog }}
            
            ### Installation
            
            #### Binary Installation
            Download the appropriate binary for your platform below.
            
            #### Cargo Installation
            ```bash
            cargo install kindlyguard
            ```
            
            #### NPM Installation
            ```bash
            npm install -g @kindlyguard/cli
            ```
            
            #### Docker
            ```bash
            docker pull kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}
            ```
            
            ### Checksums
            Verify your download with the provided `.sha256` files.
          draft: false
          prerelease: false

      - name: Upload release assets
        run: |
          for file in release/*; do
            if [[ -f "$file" && ! "$file" =~ \.sha256$ ]]; then
              echo "Uploading $file"
              gh release upload "v${{ needs.validate.outputs.version }}" "$file" --clobber
            fi
          done
          
          # Upload checksums
          for file in release/*.sha256; do
            if [[ -f "$file" ]]; then
              echo "Uploading checksum $file"
              gh release upload "v${{ needs.validate.outputs.version }}" "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Stage 4: Publish to Registries
  publish-crates:
    name: Publish to crates.io
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish kindly-guard-server
        run: |
          cd kindly-guard-server
          cargo publish --no-verify
          echo "::notice::Published kindly-guard-server to crates.io"
          sleep 30  # Wait for crates.io to index

      - name: Publish kindly-guard-cli
        run: |
          cd kindly-guard-cli
          cargo publish --no-verify
          echo "::notice::Published kindly-guard-cli to crates.io"
          sleep 30

      - name: Publish kindlyguard (meta crate)
        run: |
          cargo publish --no-verify
          echo "::notice::Published kindlyguard meta crate to crates.io"

  publish-npm:
    name: Publish to NPM
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          cd npm
          npm ci

      - name: Build packages
        run: |
          cd npm
          npm run build

      - name: Publish platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm
          
          # Publish platform-specific packages first
          for pkg in packages/kindlyguard-*; do
            if [ -d "$pkg" ] && [ "$pkg" != "packages/kindlyguard-cli" ]; then
              echo "Publishing $(basename $pkg)"
              cd "$pkg"
              npm publish --access public
              cd ../..
              sleep 10  # Rate limiting
            fi
          done

      - name: Publish main CLI package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm/packages/kindlyguard-cli
          npm publish --access public
          echo "::notice::Published @kindlyguard/cli to NPM"

  publish-docker:
    name: Publish Docker Images
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}
            kindlyguard/kindlyguard:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: kindlyguard/kindlyguard
          readme-filepath: ./docker/README.md

  # Stage 5: Verification
  verify-release:
    name: Verify Release
    needs: [validate, publish-crates, publish-npm, publish-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Verify crates.io package
        run: |
          sleep 60  # Wait for indexing
          cargo search kindlyguard --limit 1
          
          # Try to install
          cargo install --version ${{ needs.validate.outputs.version }} kindlyguard --dry-run
          echo "::notice::Crates.io package verified"

      - name: Verify NPM package
        run: |
          npm view @kindlyguard/cli@${{ needs.validate.outputs.version }}
          echo "::notice::NPM package verified"

      - name: Verify Docker image
        run: |
          docker pull kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}
          docker run --rm kindlyguard/kindlyguard:${{ needs.validate.outputs.version }} --version
          echo "::notice::Docker image verified"

      - name: Update release status
        run: |
          echo "## ✅ Release Verification Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 crates.io: kindlyguard v${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 NPM: @kindlyguard/cli v${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 Docker Hub: kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform Binaries:" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 Linux x64 (musl)" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS x64" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS ARM64" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 Windows x64" >> $GITHUB_STEP_SUMMARY

  # Cleanup job for failed releases
  cleanup-on-failure:
    name: Cleanup Failed Release
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Delete failed release
        run: |
          if [ -n "${{ needs.create-release.outputs.release_id }}" ]; then
            gh release delete "v${{ needs.validate.outputs.version }}" --yes || true
          fi
          echo "::warning::Release failed and was cleaned up"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}