name: Build Multi-Platform Binaries

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Native builds
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
            
          # Cross-compilation builds using cargo-zigbuild
          - name: darwin-x64
            os: ubuntu-latest
            target: x86_64-apple-darwin
            use-cross: false
            use-zigbuild: true
            
          - name: darwin-arm64
            os: ubuntu-latest
            target: aarch64-apple-darwin
            use-cross: false
            use-zigbuild: true
            
          # Windows cross-compilation using cross-rs
          - name: win32-x64
            os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            use-cross: true
            use-zigbuild: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}
      
      - name: Install cargo-zigbuild
        if: matrix.platform.use-zigbuild
        run: |
          pip3 install ziglang
          cargo install cargo-zigbuild --locked
      
      - name: Install cross
        if: matrix.platform.use-cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked
      
      - name: Build with cargo-zigbuild
        if: matrix.platform.use-zigbuild
        run: |
          cd kindly-guard-server
          cargo zigbuild --release --target ${{ matrix.platform.target }}
          cd ../kindly-guard-cli
          cargo zigbuild --release --target ${{ matrix.platform.target }}
      
      - name: Build with cross
        if: matrix.platform.use-cross
        run: |
          cd kindly-guard-server
          cross build --release --target ${{ matrix.platform.target }}
          cd ../kindly-guard-cli
          cross build --release --target ${{ matrix.platform.target }}
      
      - name: Build native
        if: ${{ !matrix.platform.use-cross && !matrix.platform.use-zigbuild }}
        run: |
          cd kindly-guard-server
          cargo build --release --target ${{ matrix.platform.target }}
          cd ../kindly-guard-cli
          cargo build --release --target ${{ matrix.platform.target }}
      
      - name: Package binaries
        run: |
          mkdir -p dist
          
          # Copy binaries
          if [[ "${{ matrix.platform.target }}" == *"windows"* ]]; then
            cp kindly-guard-server/target/${{ matrix.platform.target }}/release/kindlyguard.exe dist/
            cp kindly-guard-cli/target/${{ matrix.platform.target }}/release/kindlyguard-cli.exe dist/
            
            # Create zip for Windows
            cd dist
            zip kindlyguard-${{ matrix.platform.name }}.zip kindlyguard.exe kindlyguard-cli.exe
          else
            cp kindly-guard-server/target/${{ matrix.platform.target }}/release/kindlyguard dist/
            cp kindly-guard-cli/target/${{ matrix.platform.target }}/release/kindlyguard-cli dist/
            
            # Make executable
            chmod +x dist/kindlyguard dist/kindlyguard-cli
            
            # Create tarball for Unix-like systems
            cd dist
            tar czf kindlyguard-${{ matrix.platform.name }}.tar.gz kindlyguard kindlyguard-cli
          fi
        shell: bash
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform.name }}
          path: dist/kindlyguard-${{ matrix.platform.name }}.*
          retention-days: 7
  
  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create SHA256 checksums
        run: |
          cd artifacts
          for dir in binaries-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/* .
            fi
          done
          sha256sum kindlyguard-*.{tar.gz,zip} > SHA256SUMS.txt
        shell: bash
      
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          gh release create "$TAG" \
            --title "KindlyGuard $TAG" \
            --draft \
            --generate-notes \
            artifacts/kindlyguard-*.{tar.gz,zip} \
            artifacts/SHA256SUMS.txt