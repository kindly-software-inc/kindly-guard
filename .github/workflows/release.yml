name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create release draft
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: KindlyGuard v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # KindlyGuard v${{ steps.get_version.outputs.version }}

            Security-focused MCP server protecting against unicode attacks, injection threats, and other AI vulnerabilities.

            ## What's Changed
            - Enhanced threat detection capabilities
            - Improved performance with optimized scanning
            - Better cross-platform support

            ## Installation

            ### Using npm (Recommended)
            ```bash
            npm install -g kindlyguard
            ```

            ### Platform-specific packages
            ```bash
            # Linux x64
            npm install @kindlyguard/linux-x64

            # macOS Apple Silicon
            npm install @kindlyguard/darwin-arm64

            # Windows x64
            npm install @kindlyguard/win32-x64
            ```

            ### Direct Download
            Download the appropriate binary for your platform from the assets below.

            ## Checksums
            SHA256 checksums are available in `checksums-${{ steps.get_version.outputs.version }}.txt`

  # Build binaries for all platforms
  build:
    name: Build ${{ matrix.platform.name }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          - name: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - name: macos-x64
            os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          - name: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false
          - name: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross
        if: matrix.platform.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binaries
        run: |
          if [[ "${{ matrix.platform.use_cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.platform.target }}
          else
            cargo build --release --target ${{ matrix.platform.target }}
          fi

      - name: Build shield (if exists)
        if: ${{ matrix.platform.os != 'ubuntu-latest' || matrix.platform.use_cross == false }}
        run: |
          if [ -d "kindly-guard-shield/src-tauri" ]; then
            cd kindly-guard-shield/src-tauri
            if [[ "${{ matrix.platform.use_cross }}" == "true" ]]; then
              cross build --release --target ${{ matrix.platform.target }}
            else
              cargo build --release --target ${{ matrix.platform.target }}
            fi
          fi

      - name: Prepare artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist/${{ matrix.platform.name }}
          
          # Copy main binaries
          cp target/${{ matrix.platform.target }}/release/kindly-guard dist/${{ matrix.platform.name }}/kindlyguard
          cp target/${{ matrix.platform.target }}/release/kindly-guard-cli dist/${{ matrix.platform.name }}/kindlyguard-cli
          
          # Copy shield if it exists
          if [ -f "kindly-guard-shield/src-tauri/target/${{ matrix.platform.target }}/release/kindly-guard-shield" ]; then
            cp kindly-guard-shield/src-tauri/target/${{ matrix.platform.target }}/release/kindly-guard-shield dist/${{ matrix.platform.name }}/
          fi
          
          # Make executable
          chmod +x dist/${{ matrix.platform.name }}/*
          
          # Generate checksums
          cd dist/${{ matrix.platform.name }}
          shasum -a 256 * > checksums.txt
          cd ../..
          
          # Create archive
          tar -czf kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.tar.gz -C dist ${{ matrix.platform.name }}

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "dist\${{ matrix.platform.name }}"
          
          # Copy main binaries
          Copy-Item "target\${{ matrix.platform.target }}\release\kindly-guard.exe" "dist\${{ matrix.platform.name }}\kindlyguard.exe"
          Copy-Item "target\${{ matrix.platform.target }}\release\kindly-guard-cli.exe" "dist\${{ matrix.platform.name }}\kindlyguard-cli.exe"
          
          # Copy shield if it exists
          if (Test-Path "kindly-guard-shield\src-tauri\target\${{ matrix.platform.target }}\release\kindly-guard-shield.exe") {
            Copy-Item "kindly-guard-shield\src-tauri\target\${{ matrix.platform.target }}\release\kindly-guard-shield.exe" "dist\${{ matrix.platform.name }}\"
          }
          
          # Generate checksums
          Set-Location "dist\${{ matrix.platform.name }}"
          Get-ChildItem -File | ForEach-Object {
            $hash = (Get-FileHash -Path $_.Name -Algorithm SHA256).Hash.ToLower()
            "$hash  $($_.Name)" | Out-File -Append -FilePath checksums.txt
          }
          Set-Location ..\..
          
          # Create archive
          Compress-Archive -Path "dist\${{ matrix.platform.name }}" -DestinationPath "kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.zip"

      - name: Upload Release Asset (tar.gz)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.tar.gz
          asset_name: kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (zip)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.zip
          asset_name: kindlyguard-${{ needs.create-release.outputs.version }}-${{ matrix.platform.name }}.zip
          asset_content_type: application/zip

      - name: Upload artifacts for npm
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform.name }}
          path: dist/${{ matrix.platform.name }}/*
          retention-days: 1

  # Publish npm packages
  publish-npm:
    name: Publish NPM Packages
    needs: [create-release, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare npm packages
        env:
          VERSION: ${{ needs.create-release.outputs.version }}
        run: |
          # Create npm package directories
          mkdir -p npm-package/npm
          
          # Process each platform
          for platform_dir in artifacts/binaries-*; do
            platform_name=$(basename "$platform_dir" | sed 's/binaries-//')
            
            # Map platform names
            case "$platform_name" in
              linux-x64) npm_platform="linux-x64" ;;
              linux-arm64) npm_platform="linux-arm64" ;;
              macos-x64) npm_platform="darwin-x64" ;;
              macos-arm64) npm_platform="darwin-arm64" ;;
              windows-x64) npm_platform="win32-x64" ;;
              *) echo "Unknown platform: $platform_name"; continue ;;
            esac
            
            # Create platform package directory
            pkg_dir="npm-package/npm/$npm_platform"
            mkdir -p "$pkg_dir"
            
            # Copy binaries
            cp -r "$platform_dir"/* "$pkg_dir/"
            
            # Remove shield binary if present (not part of npm package)
            rm -f "$pkg_dir/kindly-guard-shield"*
            
            echo "Prepared $npm_platform package"
          done
          
          # Update versions and prepare packages
          node package-binaries.js

      - name: Publish platform packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publish each platform package
          for pkg_dir in npm-package/npm/*; do
            if [ -d "$pkg_dir" ] && [ -f "$pkg_dir/package.json" ]; then
              echo "Publishing $(basename "$pkg_dir")"
              cd "$pkg_dir"
              npm publish --access public
              cd -
            fi
          done

      - name: Publish main package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd npm-package
          npm publish --access public

  # Generate and upload checksums
  checksums:
    name: Generate Checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate master checksums
        run: |
          # Collect all checksums
          echo "# KindlyGuard v${{ needs.create-release.outputs.version }} Checksums" > checksums-${{ needs.create-release.outputs.version }}.txt
          echo "" >> checksums-${{ needs.create-release.outputs.version }}.txt
          
          for platform_dir in artifacts/binaries-*; do
            platform_name=$(basename "$platform_dir" | sed 's/binaries-//')
            echo "## $platform_name" >> checksums-${{ needs.create-release.outputs.version }}.txt
            echo "" >> checksums-${{ needs.create-release.outputs.version }}.txt
            
            if [ -f "$platform_dir/checksums.txt" ]; then
              cat "$platform_dir/checksums.txt" >> checksums-${{ needs.create-release.outputs.version }}.txt
            fi
            echo "" >> checksums-${{ needs.create-release.outputs.version }}.txt
          done

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums-${{ needs.create-release.outputs.version }}.txt
          asset_name: checksums-${{ needs.create-release.outputs.version }}.txt
          asset_content_type: text/plain

  # Finalize release
  finalize:
    name: Finalize Release
    needs: [create-release, build, publish-npm, checksums]
    runs-on: ubuntu-latest
    
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Get the draft release
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 1
            });
            
            const draftRelease = releases.data.find(r => r.draft && r.tag_name === `v${{ needs.create-release.outputs.version }}`);
            
            if (draftRelease) {
              // Update release to published
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: draftRelease.id,
                draft: false,
                body: draftRelease.body + '\n\n## NPM Packages Published\n\n' +
                  '- `kindlyguard@${{ needs.create-release.outputs.version }}`\n' +
                  '- `@kindlyguard/linux-x64@${{ needs.create-release.outputs.version }}`\n' +
                  '- `@kindlyguard/linux-arm64@${{ needs.create-release.outputs.version }}`\n' +
                  '- `@kindlyguard/darwin-x64@${{ needs.create-release.outputs.version }}`\n' +
                  '- `@kindlyguard/darwin-arm64@${{ needs.create-release.outputs.version }}`\n' +
                  '- `@kindlyguard/win32-x64@${{ needs.create-release.outputs.version }}`'
              });
              
              console.log('Release published successfully!');
            } else {
              throw new Error('Draft release not found');
            }