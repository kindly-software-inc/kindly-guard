name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        VERSION="${{ steps.get_version.outputs.version }}"
        VERSION_NUM=${VERSION#v}
        
        # Extract section between this version and the previous one
        awk "/## \[$VERSION_NUM\]/{flag=1;next}/## \[/{flag=0}flag" CHANGELOG.md > version_changelog.md
        
        # If empty, use a default message
        if [ ! -s version_changelog.md ]; then
          echo "Release $VERSION" > version_changelog.md
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: KindlyGuard ${{ steps.get_version.outputs.version }}
        body_path: version_changelog.md
        draft: true
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  # Build release binaries
  build-release:
    name: Build Release (${{ matrix.target }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: kindly-guard
            archive: tar.gz
          
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary: kindly-guard
            archive: tar.gz
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: kindly-guard
            archive: tar.gz
            use-cross: true
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: kindly-guard
            archive: tar.gz
          
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: kindly-guard
            archive: tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: kindly-guard.exe
            archive: zip
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        fi
    
    - name: Install cross
      if: matrix.use-cross
      run: cargo install cross --git https://github.com/cross-rs/cross
    
    - name: Build
      run: |
        if [[ "${{ matrix.use-cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
    
    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          strip target/${{ matrix.target }}/release/${{ matrix.binary }}
        else
          if command -v strip &> /dev/null; then
            strip target/${{ matrix.target }}/release/${{ matrix.binary }}
          fi
        fi
    
    - name: Create archive (Linux/macOS)
      if: matrix.archive == 'tar.gz'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf kindly-guard-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ${{ matrix.binary }}
        mv kindly-guard-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz ../../../
    
    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      shell: powershell
      run: |
        cd target\${{ matrix.target }}\release
        Compress-Archive -Path ${{ matrix.binary }} -DestinationPath ..\..\..\kindly-guard-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: kindly-guard-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}
        asset_name: kindly-guard-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}
        asset_content_type: application/octet-stream

  # Build Docker images
  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          kindlyguard/kindly-guard
          ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish kindly-guard-server
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cd kindly-guard-server
        cargo publish --dry-run
        cargo publish || echo "Already published or error"
    
    - name: Publish kindly-guard-client
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cd kindly-guard-client
        # Wait a bit for server to be available
        sleep 30
        cargo publish --dry-run
        cargo publish || echo "Already published or error"
    
    - name: Publish kindly-guard-cli
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cd kindly-guard-cli
        # Wait a bit for client to be available
        sleep 30
        cargo publish --dry-run
        cargo publish || echo "Already published or error"

  # Create checksums
  checksums:
    name: Generate Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Generate checksums
      run: |
        cd artifacts
        sha256sum kindly-guard-* > checksums.txt
        cat checksums.txt
    
    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: artifacts/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # Finalize release
  finalize-release:
    name: Finalize Release
    needs: [create-release, build-release, docker-release, publish-crates, checksums]
    runs-on: ubuntu-latest
    if: success()
    steps:
    - name: Publish release
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            draft: false
          })
    
    - name: Announce release
      run: |
        echo "ðŸŽ‰ KindlyGuard ${{ needs.create-release.outputs.version }} has been released!"
        echo "View the release at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"