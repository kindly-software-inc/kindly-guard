name: Enhanced Version Check

# This workflow performs comprehensive version consistency checks across:
# - All Cargo.toml files (workspace and crates)
# - package.json files
# - README.md version references
# - Docker documentation
# - API documentation
# - Internal dependency versions
#
# It validates against version-locations.json and provides actionable error messages

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/package.json'
      - 'README.md'
      - 'docs/**/*.md'
      - 'docker/**'
      - 'version-locations.json'
      - '.github/workflows/version-check-enhanced.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**/Cargo.toml'
      - '**/package.json'
      - 'README.md'
      - 'docs/**/*.md'
      - 'docker/**'
      - 'version-locations.json'
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'

jobs:
  version-consistency:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Install semver for version comparison
          npm install -g semver

      - name: Extract current version
        id: current_version
        run: |
          # Get version from workspace Cargo.toml
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Validate version format
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          # Check semantic versioning format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          
          echo "‚úÖ Version format is valid: $VERSION"

      - name: Check Cargo.toml versions
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          ERRORS=0
          
          echo "Checking Cargo.toml files..."
          
          # Read expected locations from version-locations.json
          CARGO_FILES=$(jq -r '.version_locations.cargo_files[].path' version-locations.json)
          
          for file in $CARGO_FILES; do
            if [[ -f "$file" ]]; then
              FILE_VERSION=$(grep '^version = ' "$file" | head -1 | cut -d'"' -f2)
              
              if [[ "$FILE_VERSION" != "$VERSION" ]]; then
                echo "‚ùå Version mismatch in $file"
                echo "   Expected: $VERSION"
                echo "   Found: $FILE_VERSION"
                ERRORS=$((ERRORS + 1))
              else
                echo "‚úÖ $file: $FILE_VERSION"
              fi
            else
              echo "‚ö†Ô∏è  File not found: $file"
            fi
          done
          
          if [[ $ERRORS -gt 0 ]]; then
            echo ""
            echo "‚ùå Found $ERRORS version mismatches in Cargo.toml files"
            echo "üí° Fix: Run './scripts/update-version.sh $VERSION' to update all versions"
            exit 1
          fi

      - name: Check package.json versions
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          ERRORS=0
          
          echo "Checking package.json files..."
          
          # Read expected locations from version-locations.json
          PACKAGE_FILES=$(jq -r '.version_locations.package_files[].path' version-locations.json)
          
          for file in $PACKAGE_FILES; do
            if [[ -f "$file" ]]; then
              FILE_VERSION=$(jq -r '.version' "$file" 2>/dev/null || echo "parse error")
              
              if [[ "$FILE_VERSION" == "parse error" ]]; then
                echo "‚ùå Failed to parse $file"
                ERRORS=$((ERRORS + 1))
              elif [[ "$FILE_VERSION" != "$VERSION" ]]; then
                echo "‚ùå Version mismatch in $file"
                echo "   Expected: $VERSION"
                echo "   Found: $FILE_VERSION"
                ERRORS=$((ERRORS + 1))
              else
                echo "‚úÖ $file: $FILE_VERSION"
              fi
            else
              echo "‚ö†Ô∏è  File not found: $file"
            fi
          done
          
          if [[ $ERRORS -gt 0 ]]; then
            echo ""
            echo "‚ùå Found $ERRORS version mismatches in package.json files"
            echo "üí° Fix: Run './scripts/update-version.sh $VERSION' to update all versions"
            exit 1
          fi

      - name: Check README.md version
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          echo "Checking README.md version references..."
          
          # Check for version in badge format
          if grep -q "!\[Version\].*$VERSION" README.md || \
             grep -q "version-$VERSION" README.md || \
             grep -q "Version $VERSION" README.md || \
             grep -q "v$VERSION" README.md; then
            echo "‚úÖ README.md contains version $VERSION"
          else
            echo "‚ùå README.md does not contain version $VERSION"
            echo ""
            echo "Expected one of these patterns:"
            echo "  - ![Version](https://img.shields.io/badge/version-$VERSION-blue)"
            echo "  - Version $VERSION"
            echo "  - v$VERSION"
            echo ""
            echo "üí° Fix: Update README.md to include the current version"
            exit 1
          fi

      - name: Check documentation versions
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          ERRORS=0
          
          echo "Checking documentation files..."
          
          # Check API documentation
          if [[ -f "docs/API_DOCUMENTATION.md" ]]; then
            if grep -q "v$VERSION" docs/API_DOCUMENTATION.md; then
              echo "‚úÖ API documentation references v$VERSION"
            else
              echo "‚ùå API documentation does not reference v$VERSION"
              ERRORS=$((ERRORS + 1))
            fi
          fi
          
          # Check Docker documentation
          for file in docker/README.md docs/DOCKER.md docs/docker-*.md; do
            if [[ -f "$file" ]]; then
              if grep -q "$VERSION" "$file" || grep -q "latest" "$file"; then
                echo "‚úÖ $file contains version reference"
              else
                echo "‚ö†Ô∏è  $file may need version update"
              fi
            fi
          done
          
          if [[ $ERRORS -gt 0 ]]; then
            echo ""
            echo "‚ùå Found $ERRORS documentation files needing updates"
            echo "üí° Fix: Update documentation to reference version $VERSION"
            exit 1
          fi

      - name: Check internal dependencies
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          ERRORS=0
          
          echo "Checking internal dependency versions..."
          
          # Check that crates depending on workspace packages use the correct version
          DEPS=$(jq -r '.version_locations.dependency_references[]' version-locations.json)
          
          while IFS= read -r dep_info; do
            file=$(echo "$dep_info" | jq -r '.path')
            pattern=$(echo "$dep_info" | jq -r '.pattern')
            desc=$(echo "$dep_info" | jq -r '.description')
            
            if [[ -f "$file" ]]; then
              if grep -E "$pattern" "$file" | grep -q "$VERSION"; then
                echo "‚úÖ $desc: version $VERSION"
              else
                echo "‚ùå $desc: incorrect version"
                echo "   File: $file"
                echo "   Expected: workspace dependency = { version = \"$VERSION\""
                ERRORS=$((ERRORS + 1))
              fi
            fi
          done <<< "$(jq -c '.version_locations.dependency_references[]' version-locations.json)"
          
          if [[ $ERRORS -gt 0 ]]; then
            echo ""
            echo "‚ùå Found $ERRORS internal dependency version mismatches"
            echo "üí° Fix: Update internal dependencies to use version $VERSION"
            exit 1
          fi

      - name: Check for version tags
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          echo "Checking git tags..."
          
          # Check if version tag exists
          if git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "‚úÖ Git tag v$VERSION exists"
            
            # Verify tag points to current commit on main/master
            if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
              TAG_COMMIT=$(git rev-list -n 1 "v$VERSION")
              CURRENT_COMMIT="${{ github.sha }}"
              
              if [[ "$TAG_COMMIT" != "$CURRENT_COMMIT" ]]; then
                echo "‚ö†Ô∏è  Tag v$VERSION points to a different commit"
                echo "   Tag commit: $TAG_COMMIT"
                echo "   Current commit: $CURRENT_COMMIT"
              fi
            fi
          else
            echo "‚ÑπÔ∏è  Git tag v$VERSION does not exist yet"
            echo "   This is expected for unreleased versions"
          fi

      - name: Version consistency summary
        if: success()
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          echo ""
          echo "‚úÖ All version checks passed!"
          echo ""
          echo "Version $VERSION is consistent across:"
          echo "  ‚Ä¢ Cargo.toml files"
          echo "  ‚Ä¢ package.json files"
          echo "  ‚Ä¢ README.md"
          echo "  ‚Ä¢ Documentation"
          echo "  ‚Ä¢ Internal dependencies"
          
          # Provide next steps based on context
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo ""
            echo "üìã Next steps for PR:"
            echo "  1. Ensure CHANGELOG.md is updated"
            echo "  2. Run './scripts/validate-versions.sh' locally"
            echo "  3. After merge, create release with './scripts/create-github-release.sh'"
          fi

      - name: Generate version report
        if: always()
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          
          # Create a detailed version report
          cat > version-report.txt << EOF
          Version Consistency Report
          =========================
          
          Current Version: $VERSION
          Git Ref: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Event: ${{ github.event_name }}
          
          Checked Files:
          --------------
          EOF
          
          # List all checked files with their versions
          echo "Cargo.toml files:" >> version-report.txt
          find . -name "Cargo.toml" -type f | while read -r file; do
            if grep -q '^version = ' "$file"; then
              ver=$(grep '^version = ' "$file" | head -1 | cut -d'"' -f2)
              echo "  $file: $ver" >> version-report.txt
            fi
          done
          
          echo "" >> version-report.txt
          echo "package.json files:" >> version-report.txt
          find . -name "package.json" -type f -not -path "*/node_modules/*" | while read -r file; do
            ver=$(jq -r '.version' "$file" 2>/dev/null || echo "parse error")
            echo "  $file: $ver" >> version-report.txt
          done
          
          # Upload report as artifact
          echo ""
          echo "üìÑ Version report generated: version-report.txt"

      - name: Upload version report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: version-report
          path: version-report.txt
          retention-days: 30

      - name: Comment on PR with version info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ steps.current_version.outputs.version }}";
            const body = `## Version Check Results

            ‚úÖ **All version checks passed!**

            **Current Version:** \`${version}\`

            All version references are consistent across:
            - Cargo.toml files
            - package.json files  
            - README.md
            - Documentation
            - Internal dependencies

            ---
            *This check ensures version consistency throughout the codebase.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });