name: Integrated Release Workflow with cargo-dist

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Stage 1: Validation (same as before)
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Release version: $VERSION"

      - name: Verify branch
        run: |
          BRANCH=$(git branch -r --contains ${GITHUB_SHA} | grep -E 'origin/(main|master)' || true)
          if [ -z "$BRANCH" ]; then
            echo "::error::Release must be created from main or master branch"
            exit 1
          fi
          echo "::notice::Releasing from branch: $BRANCH"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run version validation
        run: |
          chmod +x scripts/validate-versions.sh
          ./scripts/validate-versions.sh
          
          # Additional check: verify tag matches root Cargo.toml
          ROOT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          if [ "$ROOT_VERSION" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "::error::Tag version (${{ steps.get_version.outputs.version }}) doesn't match Cargo.toml version ($ROOT_VERSION)"
            exit 1
          fi

      - name: Security audit
        run: |
          cargo install cargo-audit --locked
          cargo audit --deny warnings
          echo "::notice::Security audit passed"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, including all commits"
            RANGE=""
          else
            RANGE="$PREV_TAG..HEAD"
          fi
          
          # Generate changelog
          CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%an)" --no-merges | grep -v "^- chore" | head -20)
          
          # Escape for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

  # Stage 2: Use cargo-dist for binary building and installer creation
  cargo-dist-plan:
    name: Plan cargo-dist Release
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      val: ${{ steps.plan.outputs.manifest }}
      tag: ${{ steps.outputs.outputs.tag }}
      tag-flag: ${{ steps.outputs.outputs.tag-flag }}
      publishing: ${{ steps.outputs.outputs.publishing }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install cargo-dist
        shell: bash
        run: |
          cargo install cargo-dist --version 0.25.1
      
      - name: Run cargo-dist plan
        id: plan
        run: |
          cargo dist plan --tag="${{ github.ref_name }}" --output-format=json > plan-dist-manifest.json
          echo "manifest=$(cat plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"
      
      - name: Post Step Outputs
        id: outputs
        shell: bash
        run: |
          echo "tag=$(jq --raw-output ".announcement_tag" plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"
          echo "tag-flag=--tag=$(jq --raw-output ".announcement_tag" plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"
          echo "publishing=$(jq --raw-output ".announcement_is_prerelease" plan-dist-manifest.json)" >> "$GITHUB_OUTPUT"

  # Build binaries and installers with cargo-dist
  build-with-cargo-dist:
    name: Build with cargo-dist (${{ join(matrix.targets, ', ') }})
    needs: [validate, cargo-dist-plan]
    if: ${{ fromJson(needs.cargo-dist-plan.outputs.val).ci.github.artifacts_matrix.include != null }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.cargo-dist-plan.outputs.val).ci.github.artifacts_matrix }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Enable windows longpaths
        if: runner.os == 'Windows'
        run: |
          git config --global core.longpaths true
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install cargo-dist
        run: ${{ matrix.install_dist }}
      
      - name: Build artifacts
        run: |
          cargo dist build ${{ needs.cargo-dist-plan.outputs.tag-flag }} --print=verbose --output-format=json ${{ matrix.dist_args }} > dist-manifest.json
          echo "MANIFEST:"
          jq . dist-manifest.json || cat dist-manifest.json
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ join(matrix.targets, '-') }}
          path: |
            target/distrib/
            dist-manifest.json

  # Build global artifacts (installers, checksums)
  build-global-artifacts:
    needs: [validate, cargo-dist-plan, build-with-cargo-dist]
    runs-on: ubuntu-20.04
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install cargo-dist
        run: cargo install cargo-dist --version 0.25.1
      
      - name: Fetch local artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true
      
      - name: Build global artifacts
        run: |
          cargo dist build ${{ needs.cargo-dist-plan.outputs.tag-flag }} --print=verbose --output-format=json --artifacts=global > dist-manifest.json
          echo "MANIFEST:"
          jq . dist-manifest.json || cat dist-manifest.json
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-global
          path: |
            target/distrib/
            dist-manifest.json

  # Create GitHub Release with cargo-dist artifacts
  create-release:
    name: Create GitHub Release
    needs: [validate, cargo-dist-plan, build-with-cargo-dist, build-global-artifacts]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install cargo-dist
        run: cargo install cargo-dist --version 0.25.1
      
      - name: Fetch artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: target/distrib/
          merge-multiple: true
      
      - name: Create Release with cargo-dist
        run: |
          cargo dist host ${{ needs.cargo-dist-plan.outputs.tag-flag }} --steps=upload --steps=release --output-format=json > dist-manifest.json
          echo "MANIFEST:"
          jq . dist-manifest.json || cat dist-manifest.json
      
      - name: Add custom release notes
        run: |
          # Update the release with our custom changelog
          gh release edit v${{ needs.validate.outputs.version }} \
            --notes "## KindlyGuard v${{ needs.validate.outputs.version }}
            
Security-focused MCP server protecting against unicode attacks, injection attempts, and other threats.

### Changes
${{ needs.validate.outputs.changelog }}

### Installation

#### Quick Install (Recommended)

**Shell (macOS/Linux):**
\`\`\`bash
curl -LsSf https://github.com/samduchaine/kindly-guard/releases/latest/download/kindly-guard-installer.sh | sh
\`\`\`

**PowerShell (Windows):**
\`\`\`powershell
irm https://github.com/samduchaine/kindly-guard/releases/latest/download/kindly-guard-installer.ps1 | iex
\`\`\`

**Homebrew (macOS/Linux):**
\`\`\`bash
brew install samduchaine/tap/kindly-guard
\`\`\`

#### Platform-Specific Installers

- **Windows:** Download the MSI installer below
- **macOS:** Download the PKG installer below
- **Linux:** Download the .deb or .rpm package below

#### Other Installation Methods

**Cargo:**
\`\`\`bash
cargo install kindlyguard
\`\`\`

**NPM:**
\`\`\`bash
npm install -g @kindlyguard/cli
\`\`\`

**Docker:**
\`\`\`bash
docker pull kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}
\`\`\`

### Verification

All artifacts include SHA256 checksums for verification. After downloading, verify with:
\`\`\`bash
shasum -a 256 -c kindly-guard-*.sha256
\`\`\`"

  # Publish to crates.io (unchanged)
  publish-crates:
    name: Publish to crates.io
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Login to crates.io
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Publish kindly-guard-server
        run: |
          cd kindly-guard-server
          cargo publish --no-verify
        continue-on-error: true

      - name: Publish kindly-guard-cli
        run: |
          cd kindly-guard-cli
          cargo publish --no-verify
        continue-on-error: true

      - name: Publish kindlyguard metapackage
        run: |
          cd crates-io-package/kindlyguard
          cargo publish --no-verify
        continue-on-error: true

  # Publish to NPM (unchanged)
  publish-npm:
    name: Publish to NPM
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Publish @kindlyguard/cli
        working-directory: npm-package/kindlyguard-cli
        run: |
          pnpm install
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - name: Publish @kindlyguard/types
        working-directory: npm-package/kindlyguard-types
        run: |
          pnpm install
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

  # Publish Docker images (unchanged)
  publish-docker:
    name: Publish Docker Images
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            kindlyguard/kindlyguard:${{ needs.validate.outputs.version }}
            kindlyguard/kindlyguard:latest
            ghcr.io/${{ github.repository_owner }}/kindlyguard:${{ needs.validate.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/kindlyguard:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Final notification
  notify-completion:
    name: Notify Release Completion
    needs: [validate, create-release, publish-crates, publish-npm, publish-docker]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary for v${{ needs.validate.outputs.version }}"
          echo ""
          echo "### Status:"
          echo "- Release creation: ${{ needs.create-release.result }}"
          echo "- Crates.io: ${{ needs.publish-crates.result }}"
          echo "- NPM: ${{ needs.publish-npm.result }}"
          echo "- Docker: ${{ needs.publish-docker.result }}"
          echo ""
          echo "### Links:"
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }})"
          echo "- [crates.io](https://crates.io/crates/kindlyguard)"
          echo "- [npm](https://www.npmjs.com/package/@kindlyguard/cli)"
          echo "- [Docker Hub](https://hub.docker.com/r/kindlyguard/kindlyguard)"
          
          # Create summary
          echo "## Release v${{ needs.validate.outputs.version }} Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Crates.io | ${{ needs.publish-crates.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| NPM | ${{ needs.publish-npm.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.publish-docker.result }} |" >> $GITHUB_STEP_SUMMARY