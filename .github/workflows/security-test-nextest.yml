name: Security Tests (Nextest)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/scanner/**'
      - 'src/neutralizer/**'
      - 'src/validators/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/security-test-nextest.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/scanner/**'
      - 'src/neutralizer/**'
      - 'src/validators/**'
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      profile:
        description: 'Nextest profile to use'
        required: false
        default: 'security'
        type: choice
        options:
          - security
          - default
          - release

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUSTFLAGS: "-D warnings -C opt-level=2"

jobs:
  security-tests:
    name: Security Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Also test on minimum supported Rust version
          - os: ubuntu-latest
            rust: "1.70.0"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install security tools
      run: |
        # Install nextest
        curl -LsSf https://get.nexte.st/latest/${{ runner.os == 'Linux' && 'linux' || runner.os == 'macOS' && 'mac' || 'windows' }} | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
        
        # Install cargo-audit for dependency scanning
        cargo install cargo-audit --locked
        
        # Install cargo-deny for license/security checks
        cargo install cargo-deny --locked
    
    - name: Security audit
      run: |
        cargo audit
        cargo deny check
    
    - name: Run security tests
      run: |
        cargo nextest run \
          --profile=${{ github.event.inputs.profile || 'security' }} \
          --workspace \
          -E 'test(security) | test(unicode) | test(injection) | test(xss)'
    
    - name: Run fuzzing tests (Linux only)
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      run: |
        cargo nextest run \
          --profile=security \
          --workspace \
          -E 'test(fuzz)'
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results-${{ matrix.os }}-${{ matrix.rust }}
        path: |
          target/nextest/
          target/criterion/
    
    - name: Check for unsafe code
      if: matrix.rust == 'stable'
      run: |
        # Install cargo-geiger
        cargo install cargo-geiger --locked
        
        # Generate unsafe code report
        cargo geiger --all-features --output-format GitHubMarkdown > unsafe-report.md
        
        # Fail if unsafe code is found in public API
        if grep -q "🔒 0 unsafe" unsafe-report.md; then
          echo "✅ No unsafe code in public API"
        else
          echo "❌ Unsafe code detected in public API"
          cat unsafe-report.md
          exit 1
        fi
    
    - name: Performance regression check
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
      run: |
        # Run benchmarks for security-critical functions
        cargo bench --bench security_scanner -- --save-baseline current
        
        # Compare with baseline if exists
        if [ -d "target/criterion/baseline" ]; then
          cargo bench --bench security_scanner -- --baseline baseline
        fi

  security-coverage:
    name: Security Test Coverage
    runs-on: ubuntu-latest
    needs: security-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install tools
      run: |
        # Install nextest
        curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
        
        # Install coverage tools
        cargo install cargo-llvm-cov --locked
    
    - name: Generate security test coverage
      run: |
        cargo llvm-cov nextest \
          --profile=security \
          --workspace \
          -E 'test(security) | test(unicode) | test(injection)' \
          --lcov \
          --output-path security-coverage.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: security-coverage.info
        flags: security
        name: security-coverage
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov report \
          --lcov-input security-coverage.info \
          --output-dir coverage-report \
          --html
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: security-coverage-report
        path: coverage-report/

  security-summary:
    name: Security Test Summary
    runs-on: ubuntu-latest
    needs: [security-tests, security-coverage]
    if: always()
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Generate summary
      run: |
        echo "# Security Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Parse test results
        for result in artifacts/security-test-results-*/; do
          platform=$(basename "$result")
          if [ -f "$result/nextest/junit.xml" ]; then
            echo "| $platform | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $platform | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review test results in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Check coverage report for gaps" >> $GITHUB_STEP_SUMMARY
        echo "- Run \`cargo nextest run --profile=security\` locally to reproduce" >> $GITHUB_STEP_SUMMARY