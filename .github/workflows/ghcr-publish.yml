name: GitHub Container Registry Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # needed for signing the images with GitHub OIDC Token
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: cyclonedx-json
        output-file: sbom-ghcr.json

    - name: Container security scan
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-ghcr-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'

    - name: Upload scan results to GitHub Security
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-ghcr-results.sarif'
        category: 'container-scan-ghcr'

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.3'

    - name: Sign container image
      if: github.event_name != 'pull_request'
      env:
        DIGEST: ${{ steps.build.outputs.digest }}
      run: |
        echo "Signing image with digest: ${DIGEST}"
        cosign sign --yes "${REGISTRY}/${IMAGE_NAME}@${DIGEST}"

    - name: Verify container signature
      if: github.event_name != 'pull_request'
      env:
        DIGEST: ${{ steps.build.outputs.digest }}
      run: |
        echo "Verifying signature for: ${REGISTRY}/${IMAGE_NAME}@${DIGEST}"
        cosign verify \
          --certificate-identity-regexp "https://github.com/${GITHUB_REPOSITORY}/.github/workflows/ghcr-publish.yml@refs/.*" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          "${REGISTRY}/${IMAGE_NAME}@${DIGEST}"

    - name: Upload SBOM artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-ghcr
        path: sbom-ghcr.json
        retention-days: 30

    - name: Create attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true