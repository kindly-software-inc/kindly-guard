name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Test with MSRV to ensure compatibility
  test-msrv:
    name: Test MSRV (1.80)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust MSRV
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: "1.80"
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-msrv-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-msrv-build-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check MSRV compatibility
      run: |
        cargo --version
        rustc --version
        cargo check --workspace --all-features
    
    - name: Build with MSRV
      run: cargo build --workspace --all-features --verbose
    
    - name: Test with MSRV
      run: cargo test --workspace --all-features --verbose

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: test-msrv  # Only run if MSRV passes
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on Windows to save CI time
          - os: windows-latest
            rust: beta
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run security lints
      run: |
        # Run our security-focused clippy configuration
        cargo clippy --all-targets --all-features -- \
          -D clippy::unwrap_used \
          -D clippy::expect_used \
          -D clippy::panic \
          -D clippy::unimplemented \
          -D clippy::todo \
          -D clippy::dbg_macro \
          -D clippy::print_stdout \
          -D clippy::print_stderr \
          -W clippy::pedantic \
          -W clippy::missing_errors_doc \
          -W clippy::missing_panics_doc \
          -W clippy::missing_safety_doc \
          -A clippy::module_name_repetitions \
          -A clippy::must_use_candidate \
          -A clippy::missing_const_for_fn
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --workspace --all-features --verbose
    
    - name: Run unit tests with nextest
      run: cargo nextest run --workspace --lib --profile=ci
    
    - name: Run integration tests with nextest
      run: cargo nextest run --workspace --test '*' --profile=ci
    
    - name: Run doc tests (cargo test)
      run: cargo test --workspace --doc --verbose
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.rust }}
        path: |
          target/nextest/junit.xml
          target/nextest/ci-archive/
    
    - name: Check no std build
      run: cargo check --no-default-features
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
    
    - name: Generate coverage with nextest
      run: cargo llvm-cov nextest --workspace --all-features --lcov --output-path lcov.info
    
    - name: Upload to codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false