name: Docker Multi-Platform Build

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64,linux/arm/v7'
      push_image:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: kindlysoftware/kindly-guard
  DOCKERFILE: Dockerfile.multiplatform

jobs:
  build:
    name: Build Multi-Platform Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: |
            --allow-insecure-entitlement network.host
            --allow-insecure-entitlement security.insecure

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Determine platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.platforms }}" ]; then
            echo "platforms=${{ github.event.inputs.platforms }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, only build amd64 to save time
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          else
            # For main builds, build all primary platforms
            echo "platforms=linux/amd64,linux/arm64,linux/arm/v7,linux/386" >> $GITHUB_OUTPUT
          fi

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 '^version' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_image == 'true') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ github.sha }}

      - name: Generate build report
        if: always()
        run: |
          echo "## Docker Multi-Platform Build Report" > build-report.md
          echo "" >> build-report.md
          echo "**Version:** ${{ steps.version.outputs.version }}" >> build-report.md
          echo "**Platforms:** ${{ steps.platforms.outputs.platforms }}" >> build-report.md
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> build-report.md
          echo "**Push:** ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) }}" >> build-report.md
          echo "" >> build-report.md
          echo "### Build Details" >> build-report.md
          echo "- **Commit:** ${{ github.sha }}" >> build-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> build-report.md
          echo "- **Workflow:** ${{ github.workflow }}" >> build-report.md
          echo "- **Run ID:** ${{ github.run_id }}" >> build-report.md

      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md

      - name: Test image (amd64 only)
        if: success() && contains(steps.platforms.outputs.platforms, 'linux/amd64')
        run: |
          # For PRs, load the image locally
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            docker buildx build \
              --load \
              --platform linux/amd64 \
              --tag test-image:latest \
              --file ${{ env.DOCKERFILE }} \
              .
            
            # Test the image
            docker run --rm test-image:latest --version || true
            docker run --rm test-image:latest --help || true
          fi

      - name: Install cosign
        if: github.event_name != 'pull_request' && success()
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.3'

      - name: Sign container images
        if: github.event_name != 'pull_request' && success() && steps.build.outputs.digest != ''
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - name: Container vulnerability scan
        if: github.event_name != 'pull_request' && success()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload vulnerability scan results
        if: github.event_name != 'pull_request' && success()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        if: github.event_name != 'pull_request' && success()
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: cyclonedx-json
          output-file: sbom-multiplatform.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request' && success()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-multiplatform
          path: sbom-multiplatform.json

  test-platforms:
    name: Test Individual Platform Build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/386
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test build for ${{ matrix.platform }}
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag test-${{ matrix.platform }}:latest \
            --file ${{ env.DOCKERFILE }} \
            --progress plain \
            .

      - name: Report platform test result
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Build successful for ${{ matrix.platform }}"
          else
            echo "❌ Build failed for ${{ matrix.platform }}"
          fi