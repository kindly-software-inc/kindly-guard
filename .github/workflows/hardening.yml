name: Production Hardening CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security checks
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        
      - name: Check for unsafe code
        run: |
          cargo install cargo-geiger
          cargo geiger --forbid-only

  # Comprehensive testing
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Run unit tests
        run: cargo test --workspace --all-features
        
      - name: Run integration tests
        run: cargo test --test '*' --all-features
        
      - name: Run doc tests
        run: cargo test --doc --all-features

  # Fuzzing tests
  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust nightly
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
        
      - name: Run fuzz tests (limited time)
        run: |
          cd kindly-guard-server
          # Run each fuzzer for 60 seconds
          cargo +nightly fuzz run fuzz_path_validation -- -max_total_time=60 || true
          cargo +nightly fuzz run fuzz_input_validation -- -max_total_time=60 || true
          cargo +nightly fuzz run fuzz_output_sanitization -- -max_total_time=60 || true
        continue-on-error: true

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Run benchmarks
        run: |
          cd kindly-guard-server
          cargo bench --no-run
          cargo bench -- --output-format bencher | tee output.txt
          
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: kindly-guard-server/output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
        
      - name: Generate coverage
        run: |
          cargo tarpaulin --out Xml --all-features --workspace \
            --exclude-files "**/tests/*" \
            --exclude-files "**/benches/*" \
            --exclude-files "**/examples/*"
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./cobertura.xml

  # Lint and format
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -W clippy::all \
            -W clippy::pedantic \
            -W clippy::nursery \
            -A clippy::module_name_repetitions \
            -A clippy::must_use_candidate

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Check dependencies
        run: |
          cargo tree --duplicate
          cargo outdated --exit-code 1 || true
          
      - name: License check
        run: |
          cargo install cargo-license
          cargo license --avoid-build-deps --avoid-dev-deps

  # SARIF/Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Rust Security Scanner
        uses: actions-rust-lang/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # Integration test for CLI
  cli-integration:
    name: CLI Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Build release binary
        run: cargo build --release
        
      - name: Test CLI commands
        run: |
          # Test status command
          ./target/release/kindly-guard status --format json
          
          # Test scan command
          echo "test input" | ./target/release/kindly-guard scan --text
          
          # Test info command
          ./target/release/kindly-guard info unicode
          
          # Test telemetry
          ./target/release/kindly-guard telemetry
          
      - name: Test error handling
        run: |
          # Test invalid commands
          ! ./target/release/kindly-guard invalid-command
          
          # Test rate limiting (should eventually fail)
          for i in {1..200}; do
            ./target/release/kindly-guard status --format minimal || break
          done

  # Release build check
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          
      - name: Build release
        run: |
          cargo build --release --all-features
          
      - name: Check binary size
        run: |
          ls -lh target/release/kindly-guard
          size target/release/kindly-guard
          
      - name: Strip binary
        run: |
          strip target/release/kindly-guard
          ls -lh target/release/kindly-guard
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: kindly-guard-linux
          path: target/release/kindly-guard