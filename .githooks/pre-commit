#!/bin/bash
# Pre-commit hook to prevent forbidden term exposure

set -e

echo "üîç Running security pre-commit checks..."

# Define forbidden terms that should not be committed
FORBIDDEN_TERMS="AtomicEventBuffer|AtomicBitPackedState|LockFreeCounter|AdaptiveThreshold|PredictiveAnalyzer|SmartCache|kindly-guard-core|kindly_guard_core"

# Check for forbidden terms in staged files
echo "Checking for forbidden terms..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml|md|yml|yaml|json|sh)$' || true)

if [ -n "$STAGED_FILES" ]; then
    for file in $STAGED_FILES; do
        # Skip checking files that are in .gitignore
        if git check-ignore -q "$file"; then
            continue
        fi
        
        # Check for forbidden terms
        if grep -E "$FORBIDDEN_TERMS" "$file" 2>/dev/null; then
            echo "‚ùå ERROR: Proprietary terms detected in $file"
            echo "   Please remove references to: $FORBIDDEN_TERMS"
            exit 1
        fi
        
        # Check for direct imports from private crate in Rust files
        if [[ "$file" == *.rs ]] && grep -E "use kindly_guard_core::" "$file" 2>/dev/null; then
            echo "‚ùå ERROR: Direct import from private crate detected in $file"
            echo "   Use trait abstractions instead of direct imports"
            exit 1
        fi
    done
fi

# Check for unwrap() in production Rust code
echo "Checking for unwrap() usage..."
RUST_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.rs$' | grep -v test | grep -v example || true)

if [ -n "$RUST_FILES" ]; then
    UNWRAP_COUNT=0
    for file in $RUST_FILES; do
        if grep -q "\.unwrap()" "$file" 2>/dev/null; then
            echo "‚ö†Ô∏è  WARNING: unwrap() detected in $file"
            UNWRAP_COUNT=$((UNWRAP_COUNT + 1))
        fi
    done
    
    if [ $UNWRAP_COUNT -gt 0 ]; then
        echo "‚ö†Ô∏è  Found $UNWRAP_COUNT files with unwrap() calls"
        echo "   Consider using proper error handling with Result<T, E>"
    fi
fi

echo "‚úÖ Security pre-commit checks passed!"
exit 0